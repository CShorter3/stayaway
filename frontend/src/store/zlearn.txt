A 'store' holds the entire state of an application 
    + brings together state, actions, and reducers that make app
    + provides a way to access and update state.
        - holds current state
        - access state -> store.getState()
        - update state -> store.dispatch(action)
        - register listener callbacks and unregister -> store.subscribe(listener), store.unsubscribe()

A 'rootReducer' handles all the actions dispatched by individual reducers,
which are functions that edits the inital state of the store
    + reducers takes curent state and action to produce new, *IMMUTABLE state
    + cant do asynchronous logic or other "side effects"

A 'thunk' is a function that encloses an action used to manipulate the store
    + logic is not bound to any specific Redux store instance and keeps it reusable.
    + redux is designed to be synchronous, thunk allows async functionality
    + implement complex logic outside of components 
    + dispatch multiple actions in a row or over time
    + Writing logic that needs access to access stateValues like getState in an action